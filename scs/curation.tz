parameter (or (pair %claim_hDAO (nat %hDAO_amount) (nat %objkt_id)) (or (pair %configure (address %fa2) (address %protocol)) (pair %curate (nat %hDAO_amount) (pair (address %issuer) (nat %objkt_id)))));
storage   (pair (pair (big_map %curations nat (pair (nat %hDAO_balance) (address %issuer))) (pair (address %fa2) (bool %locked))) (pair (address %manager) (pair (big_map %metadata string bytes) (address %protocol))));
code
  {
    UNPAIR;
    IF_LEFT
      {
        SWAP;
        DUP;
        DUG 2;
        CAR;
        CAR;
        SWAP;
        DUP;
        DUG 2;
        CDR;
        GET;
        IF_SOME
          {}
          {
            PUSH int 234;
            FAILWITH;
          };
        CDR;
        SENDER;
        COMPARE;
        EQ;
        IF
          {
            SWAP;
            DUP;
            DUG 2;
            CAR;
            CAR;
            SWAP;
            DUP;
            DUG 2;
            CDR;
            GET;
            IF_SOME
              {}
              {
                PUSH int 234;
                FAILWITH;
              };
            CAR;
            SWAP;
            DUP;
            DUG 2;
            CAR;
            COMPARE;
            LE;
          }
          {
            PUSH bool False;
          };
        IF
          {}
          {
            PUSH string "WrongCondition: (sp.sender == self.data.curations[params.objkt_id].issuer) & (params.hDAO_amount <= self.data.curations[params.objkt_id].hDAO_balance)";
            FAILWITH;
          };
        NIL operation;
        DUP 3;
        CAR;
        GET 3;
        CONTRACT %transfer (list (pair address (list (pair address (pair nat nat)))));
        IF_SOME
          {}
          {
            PUSH int 240;
            FAILWITH;
          };
        PUSH mutez 0;
        NIL (pair address (list (pair address (pair nat nat))));
        NIL (pair address (pair nat nat));
        DUP 6;
        CAR;
        PUSH nat 0;
        SENDER;
        PAIR 3;
        CONS;
        SELF_ADDRESS;
        PAIR;
        CONS;
        TRANSFER_TOKENS;
        CONS;
        DUP 3;
        UNPAIR;
        UNPAIR;
        DUP;
        DUP 6;
        CDR;
        DUP;
        DUG 2;
        GET;
        IF_SOME
          {}
          {
            PUSH int 237;
            FAILWITH;
          };
        DUP 7;
        CAR;
        DIG 8;
        CAR;
        CAR;
        DIG 8;
        CDR;
        GET;
        IF_SOME
          {}
          {
            PUSH int 237;
            FAILWITH;
          };
        CAR;
        SUB;
        ABS;
        UPDATE 1;
        SOME;
        SWAP;
        UPDATE;
        PAIR;
        PAIR;
        SWAP;
      }
      {
        IF_LEFT
          {
            SWAP;
            DUP;
            DUG 2;
            GET 3;
            SENDER;
            COMPARE;
            EQ;
            IF
              {
                SWAP;
                DUP;
                DUG 2;
                CAR;
                GET 4;
                NOT;
              }
              {
                PUSH bool False;
              };
            IF
              {}
              {
                PUSH string "WrongCondition: (sp.sender == self.data.manager) & (~ self.data.locked)";
                FAILWITH;
              };
            SWAP;
            UNPAIR;
            UNPAIR;
            SWAP;
            CDR;
            DUP 4;
            CAR;
            PAIR;
            SWAP;
            PAIR;
            PAIR;
            SWAP;
            CDR;
            UPDATE 6;
            UNPAIR;
            UNPAIR;
            SWAP;
            CAR;
            PUSH bool True;
            SWAP;
            PAIR;
            SWAP;
            PAIR;
            PAIR;
          }
          {
            SWAP;
            DUP;
            DUG 2;
            GET 6;
            SENDER;
            COMPARE;
            EQ;
            IF
              {}
              {
                PUSH string "WrongCondition: sp.sender == self.data.protocol";
                FAILWITH;
              };
            SWAP;
            DUP;
            DUG 2;
            CAR;
            CAR;
            SWAP;
            DUP;
            DUG 2;
            GET 4;
            MEM;
            IF
              {
                SWAP;
                UNPAIR;
                UNPAIR;
                DUP;
                DUP 5;
                GET 4;
                DUP;
                DUG 2;
                GET;
                IF_SOME
                  {}
                  {
                    PUSH int 247;
                    FAILWITH;
                  };
                DUP;
                CAR;
                DUP 7;
                CAR;
                ADD;
                UPDATE 1;
                SOME;
                SWAP;
                UPDATE;
                DUP;
                DUP 5;
                GET 4;
                DUP;
                DUG 2;
                GET;
                IF_SOME
                  {}
                  {
                    PUSH int 248;
                    FAILWITH;
                  };
                DIG 5;
                GET 3;
                UPDATE 2;
                SOME;
                SWAP;
                UPDATE;
                PAIR;
                PAIR;
              }
              {
                SWAP;
                UNPAIR;
                UNPAIR;
                DIG 3;
                DUP;
                GET 3;
                SWAP;
                DUP;
                DUG 5;
                CAR;
                PAIR;
                SOME;
                DIG 4;
                GET 4;
                UPDATE;
                PAIR;
                PAIR;
              };
          };
        NIL operation;
      };
    PAIR;
  };